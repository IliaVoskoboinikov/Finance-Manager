package soft.divan.financemanager.feature.transaction.transaction_impl.precenter.model

import soft.divan.financemanager.core.shared_history_transaction_category.presenter.model.UiCategory
import soft.divan.financemanager.core.shared_history_transaction_category.presenter.model.UiTransaction
import java.math.BigDecimal
import java.time.LocalDateTime

// --- MOCK DATA ---

val mockCategories = listOf(
    UiCategory(
        id = 1,
        name = "–ï–¥–∞",
        emoji = "üçî",
        isIncome = false
    ),
    UiCategory(
        id = 2,
        name = "–ó–∞—Ä–ø–ª–∞—Ç–∞",
        emoji = "üí∞",
        isIncome = true
    ),
    UiCategory(
        id = 3,
        name = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        emoji = "üöå",
        isIncome = false
    ),
    UiCategory(
        id = 4,
        name = "–ü–æ–¥–∞—Ä–∫–∏",
        emoji = "üéÅ",
        isIncome = false
    ),
    UiCategory(
        id = 5,
        name = "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        emoji = "üìà",
        isIncome = true
    )
)

val mockTransaction = UiTransaction(
    id = 1001,
    accountId = 1,
    category = mockCategories[0], // "–ï–¥–∞"
    amount = BigDecimal("450.75"),
    amountFormatted = "-450,75 ‚ÇΩ",
    transactionDate = LocalDateTime.now().minusDays(1),
    comment = "–û–±–µ–¥ –≤ –∫–∞—Ñ–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏",
    createdAt = LocalDateTime.now().minusDays(1).minusHours(2),
    updatedAt = LocalDateTime.now()
)

val mockTransactionUiStateSuccess = TransactionUiState.Success(
    transaction = mockTransaction,
    categories = mockCategories,
    accountName = "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç"
)

val mockTransactionUiStateLoading = TransactionUiState.Loading

val mockTransactionUiStateError = TransactionUiState.Error(
    message = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
)